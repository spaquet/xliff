#!/bin/bash

# import_translations.sh

VERSION="1.0.0"
TRANSLATIONS_FILE="untranslated_all.txt"

# Function to display help
show_help() {
    echo "Usage: $0 [OPTIONS]"
    echo "Import translated text from a single file back into the original XLIFF files."
    echo
    echo "Options:"
    echo "  -t, --translations FILE  Specify the translations file (default: untranslated_all.txt)"
    echo "  -h, --help               Display this help and exit"
    echo "  -v, --version            Display version information and exit"
    echo
    echo "Expects translations in the format generated by extract_untranslated.sh."
}

# Function to display version
show_version() {
    echo "import_translations.sh version $VERSION"
    echo "Developed for importing translated XLIFF content."
}

# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -t|--translations) TRANSLATIONS_FILE="$2"; shift ;;
        -h|--help) show_help; exit 0 ;;
        -v|--version) show_version; exit 0 ;;
        *) echo "Unknown option: $1"; show_help; exit 1 ;;
    esac
    shift
done

# Check if translations file exists
if [[ ! -f "$TRANSLATIONS_FILE" ]]; then
    echo "Error: Translations file '$TRANSLATIONS_FILE' not found."
    exit 1
fi

# Temporary directory for updated files
TEMP_DIR="temp_xliff"
mkdir -p "$TEMP_DIR"

# Track processed files to avoid overwriting
declare -A processed_files

# Read translations file and update XLIFF files
while IFS= read -r line; do
    if [[ $line =~ ^Entry\ #([0-9]+)$ ]]; then
        entry_num="${BASH_REMATCH[1]}"
        read -r file_line
        read -r lang_line
        read -r id_line
        read -r source_line
        read -r target_line
        read -r separator

        file=$(echo "$file_line" | cut -d' ' -f2-)
        id=$(echo "$id_line" | cut -d' ' -f2-)
        source=$(echo "$source_line" | cut -d' ' -f2-)
        target=$(echo "$target_line" | cut -d' ' -f2-)

        # Skip if target is still "(untranslated)" or if source is "QR Unveil" or "Simple QR"
        if [[ "$target" == "(untranslated)" || "$source" == "QR Unveil" || "$source" == "Simple QR" ]]; then
            continue
        fi

        # Check if file exists
        if [[ ! -f "$file" ]]; then
            echo "Warning: File '$file' not found, skipping entry #$entry_num"
            continue
        fi

        # Prepare output file (append _updated to original filename)
        output_file="${file%/*}/${TEMP_DIR}/${file##*/}"
        output_file="${output_file%.xliff}_updated.xliff"

        # Copy original file to temp location if not already processed
        if [[ -z "${processed_files[$file]}" ]]; then
            mkdir -p "$(dirname "$output_file")"
            cp "$file" "$output_file"
            processed_files[$file]=1
        fi

        # Update the XLIFF file
        sed -i.bak "/<trans-unit id=\"$id\"/,/<\/trans-unit>/ {
            /<source>$source<\/source>/ {
                /<target/! s/<\/source>/<\/source>\n        <target state=\"translated\">$target<\/target>/
                /<target/ s/<target[^>]*>.*<\/target>/<target state=\"translated\">$target<\/target>/
            }
        }" "$output_file"
    fi
done < "$TRANSLATIONS_FILE"

# Clean up backup files
find "$TEMP_DIR" -name "*.bak" -delete

echo "Translations imported. Updated XLIFF files are in '$TEMP_DIR' directory."
echo "Review the updated files and move them to replace the originals if correct."