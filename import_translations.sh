#!/bin/bash

# import_translations.sh

VERSION="1.0.5"
TRANSLATIONS_FILE="untranslated_all.txt"
DEST_DIR="updated_xliff"
FORCE_UPDATE=0

# Function to display help
show_help() {
    echo "Usage: $0 [OPTIONS]"
    echo "Import translated text from a single file into existing XLIFF files in a specified destination directory."
    echo
    echo "Options:"
    echo "  -t, --translations FILE  Specify the translations file (default: untranslated_all.txt)"
    echo "  -d, --dest-dir DIR       Specify the destination directory containing XLIFF files to update (default: updated_xliff)"
    echo "  -f, --force              Force update even if a translation already exists"
    echo "  -h, --help               Display this help and exit"
    echo "  -v, --version            Display version information and exit"
    echo
    echo "Expects translations in the format generated by extract_untranslated.sh."
    echo "Updates existing XLIFF files in the destination directory based on paths from the translations file."
    echo "By default, skips entries where a translation already exists unless --force is used."
}

# Function to display version
show_version() {
    echo "import_translations.sh version $VERSION"
    echo "Developed for importing translated XLIFF content."
}

# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -t|--translations) TRANSLATIONS_FILE="$2"; shift ;;
        -d|--dest-dir) DEST_DIR="$2"; shift ;;
        -f|--force) FORCE_UPDATE=1 ;;
        -h|--help) show_help; exit 0 ;;
        -v|--version) show_version; exit 0 ;;
        *) echo "Unknown option: $1"; show_help; exit 1 ;;
    esac
    shift
done

# Check if translations file exists
if [[ ! -f "$TRANSLATIONS_FILE" ]]; then
    echo "Error: Translations file '$TRANSLATIONS_FILE' not found."
    exit 1
fi

# Check if destination directory exists
if [[ ! -d "$DEST_DIR" ]]; then
    echo "Error: Destination directory '$DEST_DIR' does not exist. Please create it and copy the XLIFF files there first."
    exit 1
fi

# Use a temporary file to track processed files
PROCESSED_FILES_TRACKER=$(mktemp)
echo "Temporary tracker file created: $PROCESSED_FILES_TRACKER"

# Counters for processed, skipped, and warned entries
processed_count=0
skipped_count=0
warned_count=0

# Read translations file and update XLIFF files
while IFS= read -r line; do
    if [[ $line =~ ^Entry\ #([0-9]+)$ ]]; then
        entry_num="${BASH_REMATCH[1]}"
        read -r file_line
        read -r lang_line
        read -r id_line
        read -r source_line
        read -r target_line
        read -r separator

        src_file=$(echo "$file_line" | cut -d' ' -f2-)
        target_lang=$(echo "$lang_line" | cut -d' ' -f2-)
        id=$(echo "$id_line" | cut -d' ' -f2-)
        source=$(echo "$source_line" | cut -d' ' -f2-)
        target=$(echo "$target_line" | cut -d' ' -f2-)

        # Skip if target is still "(untranslated)" or if source is "QR Unveil" or "Simple QR"
        if [[ "$target" == "(untranslated)" || "$source" == "QR Unveil" || "$source" == "Simple QR" ]]; then
            echo "Skipping Entry #$entry_num: Target is '$target' or source is '$source'"
            ((skipped_count++))
            continue
        fi

        # Check if source file exists (for reference)
        if [[ ! -f "$src_file" ]]; then
            echo "Warning: Source file '$src_file' not found for Entry #$entry_num (reference only, continuing)"
        fi

        # Prepare output file in the destination directory (use exact filename)
        output_file="$DEST_DIR/$(basename "$src_file")"

        # Check if the output file exists in the destination directory
        if [[ ! -f "$output_file" ]]; then
            echo "Error: XLIFF file '$output_file' not found in '$DEST_DIR' for Entry #$entry_num, skipping"
            echo "  Ensure the file exists in the destination directory before running this script."
            ((skipped_count++))
            continue
        fi

        # Mark file as processed (even if it was already there)
        if ! grep -Fxq "$src_file" "$PROCESSED_FILES_TRACKER"; then
            echo "Processing existing file: '$output_file'"
            echo "$src_file" >> "$PROCESSED_FILES_TRACKER"
        fi

        # Check if the trans-unit already has a target
        existing_target=$(sed -n "/<trans-unit id=\"$id\"/,/<\/trans-unit>/ { /<target[^>]*>\(.*\)<\/target>/p; }" "$output_file" | sed -n 's/.*<target[^>]*>\(.*\)<\/target>.*/\1/p')

        if [[ -n "$existing_target" && "$existing_target" != "$source" && $FORCE_UPDATE -eq 0 ]]; then
            echo "Warning: Entry #$entry_num in '$output_file' (ID: '$id') already has a translation:"
            echo "  Existing Target: '$existing_target'"
            echo "  New Target: '$target'"
            echo "  Skipping update (use --force to override)"
            ((warned_count++))
            ((skipped_count++))
            continue
        fi

        # Update the XLIFF file
        echo "Processing Entry #$entry_num: Updating '$output_file' with ID '$id' (Language: $target_lang)"
        echo "  Source: '$source'"
        echo "  Target: '$target'"
        if [[ -n "$existing_target" && $FORCE_UPDATE -eq 1 ]]; then
            echo "  Overriding existing target: '$existing_target'"
        fi
        sed -i.bak "/<trans-unit id=\"$id\"/,/<\/trans-unit>/ {
            /<source>$source<\/source>/ {
                /<target/! s/<\/source>/<\/source>\n        <target state=\"translated\">$target<\/target>/
                /<target/ s/<target[^>]*>.*<\/target>/<target state=\"translated\">$target<\/target>/
            }
        }" "$output_file" || {
            echo "Error: Failed to update '$output_file' for Entry #$entry_num"
            ((skipped_count++))
            continue
        }
        ((processed_count++))
    fi
done < "$TRANSLATIONS_FILE"

# Clean up backup files and temporary tracker
echo "Cleaning up backup files in '$DEST_DIR'"
find "$DEST_DIR" -name "*.bak" -delete
echo "Removing temporary tracker file: $PROCESSED_FILES_TRACKER"
rm -f "$PROCESSED_FILES_TRACKER"

# Summary
echo "Translations import completed:"
echo "  Processed: $processed_count entries"
echo "  Skipped: $skipped_count entries (including $warned_count due to existing translations)"
echo "Updated XLIFF files are in '$DEST_DIR' directory."
echo "These files can now be reimported into the .xcloc package."